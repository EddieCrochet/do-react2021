{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\do-react2021\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpensesList from './ExpensesList';\nimport Card from '../UI/Card';\nimport ExpensesFilter from './ExpensesFilter';\nimport './Expenses.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState('2021');\n\n  const filterChangeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  const filteredExpenses = props.items.filter(exp => exp.date.getFullYear().toString() === filteredYear);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onFilterChange: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ExpensesList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Expenses, \"Mc+NeR06clC/ISYiaZXb0Ie4vks=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Development/do-react2021/01-starting-setup/src/components/Expenses/Expenses.js"],"names":["ExpensesList","Card","ExpensesFilter","React","useState","Expenses","props","filteredYear","setFilteredYear","filterChangeHandler","selectedYear","filteredExpenses","items","filter","exp","date","getFullYear","toString"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACrB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMK,mBAAmB,GAAGC,YAAY,IAAI;AACxCF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAGL,KAAK,CAACM,KAAN,CACpBC,MADoB,CACbC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,OAAsCV,YADhC,CAAzB;AAKA,sBAAQ;AAAA,2BACA,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,8BACA,QAAC,cAAD;AAAgB,QAAA,QAAQ,EAAEA,YAA1B;AAAwC,QAAA,cAAc,EAAEE;AAAxD;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAAR;AA+BH;;GA3CQJ,Q;;KAAAA,Q;AA6CT,eAAeA,QAAf","sourcesContent":["import ExpensesList from './ExpensesList';\r\nimport Card from '../UI/Card';\r\nimport ExpensesFilter from './ExpensesFilter';\r\nimport './Expenses.css';\r\nimport React, { useState } from 'react';\r\n\r\nfunction Expenses(props) {\r\n    const [filteredYear, setFilteredYear] = useState('2021');\r\n\r\n    const filterChangeHandler = selectedYear => {\r\n        setFilteredYear(selectedYear);\r\n    };\r\n\r\n    const filteredExpenses = props.items\r\n        .filter(exp => exp.date.getFullYear().toString() === filteredYear);\r\n\r\n    \r\n    \r\n    return (<div>\r\n            <Card className='expenses'>\r\n            <ExpensesFilter selected={filteredYear} onFilterChange={filterChangeHandler} />\r\n            <ExpensesList />\r\n               \r\n               {/* ...and the most lean way keeps the logic out of the return - what we have uncommented...\r\n               {filteredExpenses.length === 0 && <p>No expenses found...</p>}\r\n               {filteredExpenses.length > 0 && \r\n                    filteredExpenses.map((expense) => (\r\n                    <ExpenseItem\r\n                        key={expense.id}\r\n                        title={expense.title}\r\n                        amount={expense.amount}\r\n                        date={expense.date}/>))\r\n                } */}\r\n               \r\n               {/*  ifs and for not allowd in brackets so  we have to use a lot of ternarys\r\n                if the ternary gets too long we can short hand hack it the way it's done above*/}\r\n                {/* {filteredExpenses.length === 0 ? (\r\n                    <p>No expenses found...</p>\r\n                ) : (\r\n                    filteredExpenses.map((expense) => (\r\n                    <ExpenseItem\r\n                        key={expense.id}\r\n                        title={expense.title}\r\n                        amount={expense.amount}\r\n                        date={expense.date}/>))\r\n                    ) \r\n                } */}\r\n            </Card>\r\n            </div>)\r\n}\r\n\r\nexport default Expenses;"]},"metadata":{},"sourceType":"module"}